############################# Description ################################
# This script is created for FINLION FMN project.                        #
# This script is part of csvToJSON.py.                                   #
#                                                                        #
# Author: Rouvinen Juha-Matti, Insta Advance                             #
# Date: 10/04/2023                                                       #
# Updated: 29/06/2023                                                    #
############################# License ####################################
#       Copyright [2023] [Insta Advance, Juha-Matti Rouvinen]            #
#                                                                        #
#   Licensed under the Apache License, Version 2.0 (the "License");      #
#   you may not use this file except in compliance with the License.     #
#   You may obtain a copy of the License at                              #
#                                                                        #
#       http://www.apache.org/licenses/LICENSE-2.0                       #
##########################################################################

import os
from main import util_tools

opened_files = []
#print colors
cred = '\033[91m'
cgreen = '\033[92m'
cyellow = '\033[93m'
cblue = '\033[94m'
cturq = '\033m[34m'
cend = '\033[0m'
chead = '\033[42m'

#file handling
def file_handling(*args): #open, filename, printout | write, filename,text | close, filename
    operation = args[0]
    file = args[1]
    to_print = args[2]
    #open file
    if operation == 'open':
        directory = os.getcwd()
        directory = directory.replace('\\', '/')
        file = str(file)
        file = directory+'/'+file
        #if to_print is True:
            #print(f'{(cyellow)}[<-] Reading file: {file}{(cend)}')
        f = open(file, 'r')
        opened_files.append(f)
        return f
    #write file
    if operation == 'write':
        #check if output folder exists and create it if not
        directory = os.getcwd()
        directory = directory.replace('\\','/')
        output_dir = directory+'/output/'
        if not os.path.exists(output_dir):
            os.mkdir(output_dir)
        #check if current date folder exists in output folder and create it if not
        date = str(util_tools.get_date_time('date'))
        date_dir = output_dir+date
        if not os.path.exists(date_dir):
            os.mkdir(date_dir)
        new_file_name = file + '.json'
        newfile_already_exists = True
        number = 0
        path = date_dir+'/'+new_file_name
        newfile_already_exists = os.path.isfile(path)
        while newfile_already_exists is True:
            newfile_already_exists = os.path.isfile(path)
            if newfile_already_exists is True:
                number += 1
            new_file_name = file+'_'+str(number)+'.json'
            path = date_dir + '/' + new_file_name
        #check_file_or_folder_exists(new_file_name, 'file')
        if number == 0:
            new_file_name = file + '.json'
        new_file = open(date_dir+'/'+new_file_name, 'w')
        print(f'{(cgreen)}[->] Writing file: {date_dir}/{new_file_name}{(cend)}')
        new_file.write(str(to_print))
        new_file.close()
    #close file
    if operation == 'close':
        file_to_close = opened_files[0]
        file_to_close.close()

# Generated by CodiumAI
try:
    import pytest
except ImportError or ModuleNotFoundError:
    pass
from main import util_tools
"""
Code Analysis

Objective:
The objective of the 'file_handling' function is to handle file operations such as opening, writing, and closing files. It takes in three arguments: the operation to be performed, the file name, and the content to be written or printed.

Inputs:
- operation: a string indicating the operation to be performed (open, write, or close)
- file: a string indicating the name of the file to be opened, written, or closed
- to_print: a string containing the content to be written or printed (only used for the 'write' operation)

Flow:
- If the operation is 'open', the function opens the file and adds it to a list of opened files. It then returns the file object.
- If the operation is 'write', the function checks if an 'output' folder exists and creates it if it doesn't. It then checks if a folder with the current date exists in the 'output' folder and creates it if it doesn't. The function then generates a unique file name and creates a new file with that name in the current date folder. It writes the content to the file and closes it.
- If the operation is 'close', the function closes the first file in the list of opened files.

Outputs:
- If the operation is 'open', the function returns the file object.
- If the operation is 'write', the function prints a message indicating the file path where the content was written.
- There are no outputs for the 'close' operation.

Additional aspects:
- The function uses the 'os' and 'util_tools' modules.
- The function keeps track of opened files in a list to be able to close them later.
- The function generates a unique file name by appending a number to the original file name if a file with that name already exists in the current date folder.
"""
class TestFileHandling:
    #  Tests that the function can open an existing file and return the file object
    def test_open_existing_file(self):
        file = file_handling('open', '../test_folder/test_file.txt', False)
        assert file.read() == 'This is a test file.'
        file_handling('close', '../test_folder/test_file.txt', None)

    #  Tests that the function can create a new file and write to it
    def test_create_new_file(self):
        file_handling('write', 'test_file', 'This is a test file - written by pytest.')
        with open('output/' + str(util_tools.get_date_time('date')) + '/test_file.json', 'r') as f:
            assert f.read() == 'This is a test file - written by pytest.'

    #  Tests that the function can close an opened file
    def test_close_opened_file(self):
        file = file_handling('open', '../test_folder/test_file.txt', False)
        file_handling('close', '../test_folder/test_file.txt', None)
        assert file.closed

    #  Tests that the function raises an error when trying to open a non-existing file
    def test_open_non_existing_file(self):
        with pytest.raises(FileNotFoundError):
            file_handling('open', 'non_existing_file.txt', False)

    #  Tests that the function raises an error when trying to close an unopened file
    def test_close_unopened_file(self):
        with pytest.raises(IndexError):
            file_handling('close', '')

